/*
    Daniel Oh
    CSC 4340

    This is a CUP file for WAE program

*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
   

/* Adding hashtable to use it for ident*/
action code {:
    Hashtable table = new Hashtable();
:}

parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   

terminal           SEMI, PLUS, MINUS, LPAREN, RPAREN, WITH;
terminal Integer   NUMBER;
terminal String    IDENT;

non terminal Object     assign;
non terminal Integer    waestart, wae;

/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser.
   
  <WAEStart> ::= <WAE> SEMI
  <WAE> ::= <num>
            | {+ <WAE> <WAE>}
            | {- <WAE> <WAE>}
            | {with {<id> <WAE>} <WAE>}
            | <id>
*/

   waestart ::= wae:e1 SEMI
                {:
                try{
                System.out.println("The value is = " + e1);
                }
                catch(NullPointerException e){
                    System.out.print("Semantic Error");
                }
                :}
                ;

   wae      ::= NUMBER:n
                {: RESULT = new Integer(n.intValue()); :}
                |
                LPAREN PLUS wae:e1 wae:e2 RPAREN
                {:
                try{
                RESULT = new Integer(e1.intValue() + e2.intValue());
                }
                catch(NullPointerException e){
                    System.out.print("Semantic Error");
                }
                :}
                |
                LPAREN MINUS wae:e1 wae:e2 RPAREN
                {:
                try{
                RESULT = new Integer(e1.intValue() - e2.intValue());
                }
                catch(NullPointerException e){
                    System.out.print("Semantic Error");
                }
                :}
                |
                LPAREN assign:a wae:e1 RPAREN
                {:
                try{
                RESULT = new Integer(e1.intValue());
                }
                catch(NullPointerException e){
                    System.out.print("Semantic Error");
                }
                :}
                |
                IDENT:i
                {:
                    Integer value = null;
                    if(table.containsKey(i)){
                        value = (Integer) table.get(i);
                    }
                    RESULT = value;
                :}
                ;

/*
    assign terminal will assign the key and value into hash table
*/
   assign   ::= WITH LPAREN IDENT:i wae:e1 RPAREN
                {:
                    try{
                    table.put(i, new Integer(e1.intValue()));
                    }
                    catch(NullPointerException e){
                        System.out.print("Semantic Error");
                    }
                :}
                ;